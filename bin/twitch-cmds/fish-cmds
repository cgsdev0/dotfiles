#!/bin/zsh


fish_leaderboard() {
    cd "$HOME/fishing-data/$CHAN"
    find * -maxdepth 0 -type f \
        | xargs wc -l \
        | head -n -1 \
        | sort -nr \
        | head -n 5 \
        | paste -sd '|' \
        | sed 's/|/ | /g'
}

hall_of_fame() {
  (figlet hall of fame; \
    (echo "RANK,WINS,CAUGHT BY,SPECIES"; cat ~/fishing-data/badcop_/hall-of-fame/json \
      | jq -r '[.stats.wins, .caughtBy, .fishType] | @tsv' \
      | sort -nr \
      | nl -w 1 \
      | tr '\t' ',') \
      | column -t -s ",") \
    | less
}

gen_loot_tables() {
    (repeat 300 echo "common";\
    repeat 200 echo "fairly_common";\
    repeat 100 echo "uncommon";\
    repeat 50 echo "scarce";\
    repeat 10 echo "rare";\
    repeat 1 echo "epic";\
    repeat 0 echo "legendary") > old

    (repeat 100 echo "common";\
    repeat 80 echo "fairly_common";\
    repeat 70 echo "uncommon";\
    repeat 50 echo "scarce";\
    repeat 10 echo "rare";\
    repeat 5 echo "epic";\
    repeat 1 echo "legendary") > good

    (repeat 40 echo "common";\
    repeat 80 echo "fairly_common";\
    repeat 100 echo "uncommon";\
    repeat 60 echo "scarce";\
    repeat 20 echo "rare";\
    repeat 10 echo "epic";\
    repeat 5 echo "legendary") > super

    echo "null" > null
}

show_loot_tables() {
    for rod_type in $HOME/fishing-data/$CHAN/fishing-rods/*; do
        echo "$(basename $rod_type)" | tr '[:lower:]' '[:upper:]'
        total=$(uniq -c "$rod_type" | grep -o '[0-9]*' | paste -sd+ | bc)
        for count fish_type in $(uniq -c "$rod_type"); do
            echo $(bc <<<"scale=2; $count * 100 / $total" | sed 's/^\./0./')'%',$fish_type | sed 's/_/ /g'
        done | column -t -s','
        echo
    done
}

get_rod() {
    rod_file="$HOME/fishing-data/$CHAN/fishing-rods/$name"
    touch "$rod_file"
    usable_rods=$(grep ' [1-9][0-9]*$' "$rod_file" | cut -d' ' -f1)
    best_rod="old"
    case $usable_rods in
        *"admin"*)
            best_rod="admin"
            ;;
        *"null"*)
            best_rod="null"
            ;;
        *"super"*)
            best_rod="super"
            ;;
        *"good"*)
            best_rod="good"
            ;;
    esac
    if [[ "$best_rod" == "old" ]]; then
        echo "$best_rod unlimited"
    else
        echo "$(grep $best_rod $rod_file)"
    fi
}

use_rod() {
    rod_file="$HOME/fishing-data/$CHAN/fishing-rods/$name"
    rod="$(get_rod)"
    rod_name=$(echo "$rod" | cut -d' ' -f1)
    rod_uses=$(echo "$rod" | cut -d' ' -f2)
    rod_new_uses=$((rod_uses - 1))
    sed -i "s/$rod_name $rod_uses/$rod_name $rod_new_uses/" "$rod_file"
    echo "$rod_name"
}

give_rod() {
    rod_type="$1"
    quantity="$2"
    rod_file="$HOME/fishing-data/$CHAN/fishing-rods/$name"
    touch "$rod_file"
    if grep -q "$rod_type" "$rod_file"; then
        current_quantity=$(grep "$rod_type" "$rod_file" | cut -d' ' -f2)
        new_quantity=$((current_quantity + quantity))
        sed -i "s/$rod_type $current_quantity/$rod_type $new_quantity/" "$rod_file"
    else
        # Append
        echo "$rod_type $quantity" >> "$rod_file"
    fi
}

declare -A stats_speed=(
       ["common"]="1d20"
["fairly_common"]="1d20"
     ["uncommon"]="1d20"
       ["scarce"]="1d20 + 1"
         ["rare"]="1d20 + 1"
         ["epic"]="1d20 + 2"
    ["legendary"]="1d20 + 3"
         ["null"]="0"
)

declare -A stats_hp=(
       ["common"]="2d8 + 10"
["fairly_common"]="2d8 + 10"
     ["uncommon"]="2d8 + 10"
       ["scarce"]="2d10 + 1d6 + 10"
         ["rare"]="2d10 + 1d6 + 10"
         ["epic"]="2d10 + 1d6 + 10"
    ["legendary"]="3d10 + 15"
         ["null"]="100"
)

declare -A stats_base_dmg=(
       ["common"]="1d6"
["fairly_common"]="1d6"
     ["uncommon"]="1d6"
       ["scarce"]="1d6 + 1"
         ["rare"]="1d6 + 1"
         ["epic"]="1d8 + 2"
    ["legendary"]="1d8 + 3"
         ["null"]="0"
)

declare -A stats_var_dmg=(
       ["common"]="1d4"
["fairly_common"]="1d4"
     ["uncommon"]="1d4"
       ["scarce"]="1d4"
         ["rare"]="1d4"
         ["epic"]="1d6"
    ["legendary"]="6"
         ["null"]="0"
)

roll_stats() {
    local classification="$1"
    local a=$(roll "${stats_hp[$classification]}")
    local b=$(roll "${stats_base_dmg[$classification]}")
    local c=$(roll "${stats_var_dmg[$classification]}")
    local d=$(roll "${stats_speed[$classification]}")
    echo '{"hp":'$a',"baseDmg":'$b',"varDmg":'$c',"speed":'$d'}' 1>&2
    stats_raw="$a,$b,$c,$d"
    stats_json='{"hp":'$a',"baseDmg":'$b',"varDmg":'$c',"speed":'$d'}'
}

catch_fish() {
    cd "$HOME/fishing-data/$CHAN"
    now=$(date +%s)
    if [[ -f "$HOME/fishing-cooldowns/.$name.cooldown" ]]; then
        cooldown=$(cat "$HOME/fishing-cooldowns/.$name.cooldown")
        if [[ $cooldown -gt $now ]]; then
            return
        fi
    fi
    fishing_rod="$(use_rod)"
    if [[ ! -f "$HOME/fishing-data/fishing-rods/${fishing_rod}" ]]; then
        echo "You have an invalid fishing rod!"
        return
    fi
    PRECHECK="$(fishdex check)"
    classification=$(shuf -n 1 $HOME/fishing-data/fishing-rods/${fishing_rod})
    class_pretty=$(echo "$classification" | tr '_' ' ' | sed 's/.*/\L&/; s/[a-z]*/\u&/g')
    fish_raw=$(shuf -n 1 $HOME/fishing-data/fish-by-rarity2/${classification})
    fish_id="${fish_raw%% *}"
    fish="${fish_raw#* }"

    # generate stats for our fish
    roll_stats "$classification"
    fish_float="${$(head -c 8 < /dev/urandom | od -tu8 -An)// /}"

    most_count=$(find * -maxdepth 0 -type f \
        | xargs cut -d',' -f1 \
        | sort \
        | uniq -c \
        | sort -nr \
        | head -n 1 \
        | grep -oE '[0-9].*' \
        | cut -d' ' -f1)
    count=$(find * -maxdepth 0 -type f | xargs cut -d',' -f1 | grep "^${fish_id}$" | wc -l)
    description="a"
    touch "$HOME/fishing-data/${CHAN}/$name"
    personalcount=$(cut -d',' -f1 "$HOME/fishing-data/${CHAN}/$name" | grep "$fish_id" | wc -l)
    if [[ $personalcount -eq 0 ]]; then
        description="their first"
    fi

    rarity=$(bc <<< "scale=2; 100 - ( $count / $most_count * 100 )")

    echo "$fish_id,$fish,$fish_float,$stats_raw" >> "$HOME/fishing-data/${CHAN}/$name"
    if [[ "$name" != "$CHAN" ]]; then
      if [[ "$IS_SUBSCRIBER" == "1" ]]; then
        echo $(( now + 90 )) > "$HOME/fishing-cooldowns/.$name.cooldown"
      else
        echo $(( now + 120 )) > "$HOME/fishing-cooldowns/.$name.cooldown"
      fi
    fi
    if [[ $count -eq 0 ]]; then
        description="THE FIRST"
        echo "@$name caught and DISCOVERED $description $fish ($class_pretty)! ( never caught before :O ) ($fishing_rod rod used)"
    else
        echo "@$name caught $description $fish ($class_pretty)! ($rarity% rarity) ($fishing_rod rod used)"
    fi
    FISH_JSON='{"fish":"'$fish'","classification":"'$classification'","caught_by":"'$name'","id":'$fish_id',"stats":'$stats_json',"float":"'$fish_float'"}'
    tbus-send "fish-catch" "$FISH_JSON"
    if [[ "$(fishdex check)" != "$PRECHECK" ]]; then
      send-twitch-msg "@$name HAS COMPLETED THEIR FISHDEX!!!!!!!!"
    fi
}

uncaught_fish() {
    cd "$HOME/fishing-data/${CHAN:-badcop_}"
    diff <(find * -maxdepth 0 -type f | xargs cut -d',' -f1 | sort -nu) <(cut -d' ' -f1 $HOME/fishing-data/fish-by-rarity2/* | sort -nu) | grep '>'
}

fishdex_all() {
    cd "$HOME/fishing-data/$CHAN"
    total=$(cut -d' ' -f1 ~/fishing-data/fish-by-rarity2/* | sort -nu | wc -l)
    count=$(find * -maxdepth 0 -type f | xargs cut -d',' -f1 | sort -nu | wc -l)
    echo "$count out of $total possible fish have been caught."
}

fishdex_check() {
    cd "$HOME/fishing-data/$CHAN"
    total=$(cut -d' ' -f1 ~/fishing-data/fish-by-rarity2/* | sort -nu | wc -l)
    if [[ ! -f "$HOME/fishing-data/${CHAN}/$1" ]]; then
      echo "No fishdex found!"
    fi
    count=$(cut -d',' -f1 "$HOME/fishing-data/${CHAN}/$1" | sort -nu | wc -l)
    echo "@$1 has caught $count out of $total possible fish!"
}

fishdex() {
    cd "$HOME/fishing-data/$CHAN"
    total=$(cut -d' ' -f1 ~/fishing-data/fish-by-rarity2/* | sort -nu | wc -l)
    touch "$HOME/fishing-data/${CHAN}/$name"
    count=$(cut -d',' -f1 "$HOME/fishing-data/${CHAN}/$name" | sort -nu | wc -l)
    if [[ -z "$1" ]]; then
      echo "@$name has caught $count out of $total possible fish!"
    else
      echo "$total > $count" | bc
    fi
}
