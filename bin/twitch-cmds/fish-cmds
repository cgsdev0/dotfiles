#!/bin/zsh

fish_leaderboard() {
    cd "$HOME/fishing-data/$CHAN"
    find * -maxdepth 0 -type f \
        | xargs wc -l \
        | head -n -1 \
        | sort -nr \
        | head -n 5 \
        | paste -sd '|' \
        | sed 's/|/ | /g'
}

gen_loot_tables() {
    (repeat 300 echo "common";\
    repeat 200 echo "fairly_common";\
    repeat 100 echo "uncommon";\
    repeat 50 echo "scarce";\
    repeat 10 echo "rare";\
    repeat 1 echo "epic";\
    repeat 0 echo "legendary") > old

    (repeat 100 echo "common";\
    repeat 80 echo "fairly_common";\
    repeat 70 echo "uncommon";\
    repeat 50 echo "scarce";\
    repeat 10 echo "rare";\
    repeat 5 echo "epic";\
    repeat 1 echo "legendary") > good

    (repeat 40 echo "common";\
    repeat 80 echo "fairly_common";\
    repeat 100 echo "uncommon";\
    repeat 60 echo "scarce";\
    repeat 20 echo "rare";\
    repeat 10 echo "epic";\
    repeat 5 echo "legendary") > super

    echo "null" > null
}

show_loot_tables() {
    for rod_type in $HOME/fishing-data/$CHAN/fishing-rods/*; do
        echo "$(basename $rod_type)" | tr '[:lower:]' '[:upper:]'
        total=$(uniq -c "$rod_type" | grep -o '[0-9]*' | paste -sd+ | bc)
        for count fish_type in $(uniq -c "$rod_type"); do
            echo $(bc <<<"scale=2; $count * 100 / $total" | sed 's/^\./0./')'%',$fish_type | sed 's/_/ /g'
        done | column -t -s','
        echo
    done
}

get_rod() {
    rod_file="$HOME/fishing-data/$CHAN/fishing-rods/$name"
    touch "$rod_file"
    usable_rods=$(grep ' [1-9][0-9]*$' "$rod_file" | cut -d' ' -f1)
    best_rod="old"
    case $usable_rods in
        *"null"*)
            best_rod="null"
            ;;
        *"super"*)
            best_rod="super"
            ;;
        *"good"*)
            best_rod="good"
            ;;
    esac
    if [[ "$best_rod" == "old" ]]; then
        echo "$best_rod unlimited"
    else
        echo "$(grep $best_rod $rod_file)"
    fi
}

use_rod() {
    rod_file="$HOME/fishing-data/$CHAN/fishing-rods/$name"
    rod="$(get_rod)"
    rod_name=$(echo "$rod" | cut -d' ' -f1)
    rod_uses=$(echo "$rod" | cut -d' ' -f2)
    rod_new_uses=$((rod_uses - 1))
    sed -i "s/$rod_name $rod_uses/$rod_name $rod_new_uses/" "$rod_file"
    echo "$rod_name"
}

give_rod() {
    rod_type="$1"
    quantity="$2"
    rod_file="$HOME/fishing-data/$CHAN/fishing-rods/$name"
    touch "$rod_file"
    if grep -q "$rod_type" "$rod_file"; then
        current_quantity=$(grep "$rod_type" "$rod_file" | cut -d' ' -f2)
        new_quantity=$((current_quantity + quantity))
        sed -i "s/$rod_type $current_quantity/$rod_type $new_quantity/" "$rod_file"
    else
        # Append
        echo "$rod_type $quantity" >> "$rod_file"
    fi
}

catch_fish() {
    cd "$HOME/fishing-data/$CHAN"
    now=$(date +%s)
    if [[ -f "$HOME/fishing-cooldowns/.$name.cooldown" ]]; then
        cooldown=$(cat "$HOME/fishing-cooldowns/.$name.cooldown")
        if [[ $cooldown -gt $now ]]; then
            return
        fi
    fi
    fishing_rod="$(use_rod)"
    if [[ ! -f "$HOME/fishing-data/fishing-rods/${fishing_rod}" ]]; then
        echo "You have an invalid fishing rod!"
        return
    fi
    classification=$(shuf -n 1 $HOME/fishing-data/fishing-rods/${fishing_rod})
    class_pretty=$(echo "$classification" | tr '_' ' ' | sed 's/.*/\L&/; s/[a-z]*/\u&/g')
    fish=$(shuf -n 1 $HOME/fishing-data/fish-by-rarity/${classification})
    # TODO
    # echo "Fish" $(echo "$fish" | tr '[:upper:]' '[:lower:]') > /tmp/obs_tunnel
    most_count=$(find * -maxdepth 0 -type f \
        | xargs cat \
        | sort \
        | uniq -c \
        | sort -nr \
        | head -n 1 \
        | grep -oE '[0-9].*' \
        | cut -d' ' -f1)
    count=$(find * -maxdepth 0 -type f | xargs cat | grep "$fish" | wc -l)
    description="a"
    touch "$HOME/fishing-data/${CHAN}/$name"
    personalcount=$(cat "$HOME/fishing-data/${CHAN}/$name" | grep "$fish" | wc -l)
    if [[ $personalcount -eq 0 ]]; then
        description="their first"
    fi

    rarity=$(bc <<< "scale=2; 100 - ( $count / $most_count * 100 )")
    echo "$fish" >> "$HOME/fishing-data/${CHAN}/$name"
    if [[ "$name" != "$CHAN" ]]; then
      if [[ "$IS_SUBSCRIBER" == "1" ]]; then
        echo $(( now + 90 )) > "$HOME/fishing-cooldowns/.$name.cooldown"
      else
        echo $(( now + 120 )) > "$HOME/fishing-cooldowns/.$name.cooldown"
      fi
    fi
    if [[ $count -eq 0 ]]; then
        description="THE FIRST"
        echo "@$name caught and DISCOVERED $description $fish ($class_pretty)! ( never caught before :O ) ($fishing_rod rod used)"
    else
        echo "@$name caught $description $fish ($class_pretty)! ($rarity% rarity) ($fishing_rod rod used)"
    fi
    if [[ "$classification" == "legendary" ]]; then
        mpv --volume-max=200 $FISH_LEGENDARY_SOUND &>/dev/null &
    elif [[ "$classification" == "null" ]]; then
        mpv --volume-max=200 $FISH_NULL_SOUND &>/dev/null &
    else
        mpv --volume-max=200 $FISH_PLOP_SOUND &>/dev/null &
    fi
}

uncaught_fish() {
    cd "$HOME/fishing-data/${CHAN:-badcop_}"
    diff <(find * -maxdepth 0 -type f | xargs cat | sort -u) <(cat $HOME/fishing-data/fish-by-rarity/* | sort -u) | grep '>'
}

fishdex_all() {
    cd "$HOME/fishing-data/$CHAN"
    total=$(cat ~/fishing-data/fish-by-rarity/* | sort -u | wc -l)
    count=$(find * -maxdepth 0 -type f | xargs cat | sort -u | wc -l)
    echo "$count out of $total possible fish have been caught."
}

fishdex() {
    cd "$HOME/fishing-data/$CHAN"
    total=$(cat ~/fishing-data/fish-by-rarity/* | sort -u | wc -l)
    touch "$HOME/fishing-data/${CHAN}/$name"
    count=$(cat "$HOME/fishing-data/${CHAN}/$name" | sort -u | wc -l)
    echo "@$name has caught $count out of $total possible fish!"
}
